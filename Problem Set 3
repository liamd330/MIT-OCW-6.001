;;Problem Set 3:

;;3.1.1 Write a procedure (contains? lst elt) that returns #t if elt is contained (at the top level) in lst, and #f otherwise. You should use equal? to compare items.

(define contains? (lambda (lst elt) (if (equal? lst nil) (equal? lst elt)(if (equal? (car lst) elt) (equal? (car lst) elt) (if (< 1 (length lst)) (contains? (cdr lst) elt) (equal? (car lst) elt))))))

;;3.1.2 Write a procedure (remove-duplicates lst) that returns a list containing the elements of lst, but with duplicates removed. You may assume that the input is a list of integers.

(define remove-duplicates (lambda (lst) (if (null? lst) nil (if (contains? (cdr lst) (car lst)) (remove-duplicates (cdr lst)) (cons (car lst) (remove-duplicates (cdr lst)))))))

;;3.1.3 Write a procedure (union lst1 lst2) that takes two lists of integers (containing no duplicates) and returns a list containing one instance of every integer that is in either list.

(define union (lambda (lst1 lst2) (remove-duplicates (append lst1 lst2))))

;;3.1.4 Write a procedure (subset? lst1 lst2) that returns #t if the elements of lst1 are a subset of the elements of lst2. You may assume that the elements are all integers, and that no element appears more than once in a set.

(define subset? (lambda (lst1 lst2) (if (null? lst1) #t (if (< 1 (length lst1)) (if (contains? lst2 (car lst1)) (subset? (cdr lst1) lst2)(contains? lst2 (car lst1)))(contains? lst2 (car lst1))))))

;;3.1.5 Write a procedure (intersection lst1 lst2) that takes two lists of integers (containing no duplicates) and returns a list containing one instance of every integer that is in both lists.

(define intersection  (lambda (lst1 lst2) (if (null? lst2) nil (if (contains? lst1 (car lst2))(cons (car lst2) (intersection lst1 (cdr lst2)))(intersection lst1 (cdr lst2)))))) 

;;3.1.6 Write a procedure (every-other lst) that takes a list as argument and returns a new list, containing the 0th, 2nd, 4th, etc. elements of the initial list. These elements should appear in the same order that they did in the original list.

(define every-other (lambda (lst) (if (null? lst) nil (if (= (length lst) 1) lst (cons (list-ref lst 0) (every-other (cdr (cdr lst))))))))

;;3.2.2 Write a recursive (not iterative) procedure, (count-true pred lower upper), of type (number->boolean),number,number->number, that returns the number of integers in the range lower..upper (inclusive) for which predicate pred applied to that number is true. 

(define count-true (lambda (pred lower upper) (if (< upper lower) 0 (if (pred upper) (+ 1 (count-true pred lower (- upper 1))) (count-true pred lower (- upper 1))))))

;;3.2.3 Write an iterative procedure, (count-true pred lower upper), of type (number->boolean),number,number->number, that returns the number of integers in the range lower..upper (inclusive) for which predicate pred applied to that number is true.

(define count-true (lambda (pred lower upper)(length (helper pred lower upper))))
(define helper (lambda (pred lower upper) (if (< upper lower) nil (if (pred upper)  (cons upper (helper pred lower (- upper 1))) (helper pred lower (- upper 1))))))

;;3.2.4 Write a recursive procedure, (accumulate-interval op init lower upper), of type (number,number->number),number,number,number->number that combines all of the elements in the interval [lower upper] (inclusive) by successive applications of op, starting with value init.

(define accumulate-interval (lambda (op init lower upper) (if (< upper lower) init (op init upper (accumulate-interval op init lower (- upper 1))))))

;;3.2.6 Write a procedure (repeatedly-apply p n), of type (A->A),number->(A->A), that returns a procedure that takes a single argument and applies p to it n times.

(define repeatedly-apply
  (lambda (p n) (lambda (x) (if (= 1 n) (p x) ((repeatedly-apply p (- n 1)) (p x))))))
  
;;3.2.7 Write your own higher-order procedure, (curry p), of type (A,B->C)->(A->(B->C)), that takes a binary procedure and curries it.

(define curry (lambda (p) (lambda (x) (lambda (y) (p x y)))))
